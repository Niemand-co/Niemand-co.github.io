<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niemand</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-07T16:05:05.070Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Niemand</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QuikPower</title>
    <link href="http://yoursite.com/2019/12/07/QuikPower/"/>
    <id>http://yoursite.com/2019/12/07/QuikPower/</id>
    <published>2019-12-07T05:00:27.000Z</published>
    <updated>2019-12-07T16:05:05.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><hr></p><p><head><font size=15 color=66ccff><strong>快速幂</strong></font><meta name="generator" content="Hexo 4.0.0"><link rel="alternate" href="/atom.xml" title="Niemand" type="application/atom+xml"></head></p><p><hr></p><p>&emsp;&emsp;在一般的幂运算中，给定底数x和质数n，若使用循环，在每次循环中给积变量乘上一个x，总共需要乘n个x，也就是时间复杂度为o(n)。</p><p>&emsp;&emsp;但是这样的时间复杂度还是不能满足需求，而快速幂就可以优化加速这样的运算。</p><p>&emsp;&emsp;先来分析指数n，我们都知道在计算机中数字都是二进制存储，也就是二进制可以表示所有数，而二进制数每一位只有两种状态，0和1。那么指数n也就可以表示成二进制数，如下：</p><script type="math/tex; mode=display">n=2^{p_1}+2^{p_2}+2^{p_3}+\cdots+2^{p_n}</script><p><p>&emsp;&emsp;这样之后，完整的幂运算也就可以表示成：</p></p><script type="math/tex; mode=display">ans=x^{2^{p_1}+2^{p_2}+\cdots+2^{p_n}}=x^{2^{p_1}}*x^{2^{p_2}}*\cdots*x^{2^{p_n}}</script><p>&emsp;&emsp;那么如何做到代码实现呢？我们想到$ans$若初值为1，那么我们同样在循环中给$ans$乘上一个值，在循环结束后便能得到答案，而这个乘数就是迭代器$i$控制下的$x^{2^{p_i}}$。虽然和原始做法一样都用了循环，但在快速幂中循环的次数是根据$n$的二进制数的位数而定的,也就是$log_2{n}$，而时间复杂度也自然就是$o(log{n})$级。</p><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp=<span class="number">2</span>,ans=<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span>(n)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            ans*=temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        temp*=temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Data Structure</title>
    <link href="http://yoursite.com/2019/12/03/Data-Structure/"/>
    <id>http://yoursite.com/2019/12/03/Data-Structure/</id>
    <published>2019-12-03T15:10:57.000Z</published>
    <updated>2019-12-07T16:09:49.928Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><head><font size=12 color=66ccff>Stack</font><meta name="generator" content="Hexo 4.0.0"><link rel="alternate" href="/atom.xml" title="Niemand" type="application/atom+xml"></head></p><p><hr></p><p><head><strong><font szie=10 color=purple>栈(stack)</font></strong></head><br><strong>c/cpp实现</strong><br></p><pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stack</span>&#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> member;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> *<span class="title">next</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">(<span class="built_in">stack</span> *head)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> head-&gt;member;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="built_in">stack</span> *p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    p-&gt;next=p-&gt;next-&gt;next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n,<span class="built_in">stack</span> *p,<span class="built_in">stack</span> *head)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    p-&gt;member=n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    p-&gt;next=head-&gt;next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    head-&gt;next=p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">(<span class="built_in">stack</span> *head)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> head-&gt;member==<span class="literal">NULL</span>?<span class="literal">false</span>:<span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> *<span class="title">head</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> *<span class="title">p</span>=(<span class="title">struct</span> <span class="title">stack</span>*)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">stack</span>));</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
  </entry>
  
  <entry>
    <title>Sorting Algorithm</title>
    <link href="http://yoursite.com/2019/11/29/Sorting-Algorithm/"/>
    <id>http://yoursite.com/2019/11/29/Sorting-Algorithm/</id>
    <published>2019-11-29T08:42:45.000Z</published>
    <updated>2019-12-03T16:25:48.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-JEZJElDe" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="3096834640" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"    ></div><p><hr></p><p><head><font size=15 color=#66ccff>Sorting Algorithem(updating)</font><meta name="generator" content="Hexo 4.0.0"><link rel="alternate" href="/atom.xml" title="Niemand" type="application/atom+xml"></head></p><p><hr></p><p><head><strong>冒泡排序(Bubble Sort)</strong></head></p><p>&emsp;&emsp;冒泡排序正如其名，是让乱序的数像泡泡一样一个接一个“冒上来”。</p><p>&emsp;&emsp;该方法设置两层循环（时间复杂度为O(n^2))，外层循环进行(n-1)次迭代，指冒出(n-1)次气泡；内层循环则是一次冒泡的过程。</p><strong>代码如下：</strong><br><pre>//从小到大排序#include&lt;bits/stdc++.h&gt;using namespace std;int a[N];//N为数组长度常量int main(){    int temp;    for(int i=0;i&lt;N-1；i++){        for(int j=0;j&lt;N-1;j++){            if(a[j]&gt;a[j+1]){                temp = a[j];                a[j] = a[j+1];                a[j+1] = temp;            }//若左边的数大于有边的数则交换两数，将更大的数不断右移        }    }    return 0;}</pre><hr><font color=pink>Next</font><hr><head><strong>快速排序(Quicksort)</strong></head><p>&emsp;&emsp;快速排序是利用递归的一种排序。</p><p>&emsp;&emsp;首先在一组数列中取一个key值(将它赋值给一个temp，因为这个值本身也要参加排序，我自己写的时候犯蠢了，让这个值固定不动了)，然后在数列左右两边分别向中间遍历，并在必要时进行交换，使得比key值小的数都在左边，比key值大的数都在右边，而两边交汇处则正是key值应该在的地方，而由于在下面的代码中，会控制<font color=red>原key值位置不变</font>(即开头)，这时将key值插入(与交汇位置的值交换)。</p><p>&emsp;&emsp;这一通操作后,key值得绝对位置确定了。而key值两边的值还是乱序的，那么两边现在其实就可以看作两个缩短版的原数列，分别采取同上的操作(即递归中的调用函数本身)，然后不断确定新的key值，而每确定一个，就会在其两边产生更短的乱序数列，知道产生的乱序数列只有一个值的时候，则没有必要再排，递归完成。</p><hr><strong>代码如下：</strong><pre>#include&lt;bits/stdc++.h>int a[N]={....};//使用全局变量可以方便不同函数调用void quickSort(int left,int right ) {    int i, j,temp,t;    i = left;    j = right;    temp = a[left];    if (left &gt;= right)return;    while (i != j) {        //这两处while循环的"="使得与key值相等的数位置不变        while (a[j] &gt;= temp&&i&lt;j)            j- -;        while (a[i] &lt;= temp&&i&lt;j)            i++;        if (i &lt;= j) {            t = a[i];            a[i] = a[j];            a[j] = t;        }    }    a[left] = a[i];    a[i] = temp;    //将下一轮排序的首位值传入，在全局数组中确定位置    quickSort(left, i - 1);    quickSort(i + 1, right);}</pre><hr><font color=pink>next</font><hr><head><strong>桶排序(Bucket Sort)、基数排序(Radix Sort)</strong></head><p>&emsp;&emsp;桶排序这个名字是个很形象的描述，就是先确定几个用来装数据的“桶”，而这些“桶”管理不同的数据范围，也就是将待排序的一组乱序数据根据自身的大小放入不同的“桶”中，而这些已经表明范围的“桶”已经拥有一定的顺序，或者说确定和分配范围的过程就是一种预排序。这些被大致划分并排序的一组组数据内部在进行排序就可以再重新输出时得到完整排序的数列了。</p><p>&emsp;&emsp;在选择“桶”的范围时，我们往往会选择能使数据均匀分布的划分方式。而对于基数排序，他的排序思想和桶排序基本相同，区别就在于基数排序在造“桶”时会选择常用的进制数，如10、2、16等，而这也就使得这种排序更加适用于数据更加集中的乱序数列的排序中。</p><p>&emsp;&emsp;在下面的例子中将展示以10为划分范围的基数排序，其实也同样展现了桶排序的实现方法。</p><pre>#include<iostream>#include<stack>(#include&lt;bits/stdc++.h>)#define N ...using namespace std;int a[N]={...};//由于这里以10为范围，数组中的数应尽量集中//c/cpp中桶的实现可以用结构体来进行struct bucket{    stack<int> pos;    struct bucket *next;}bucket;void BucketSort(){    struct bucket *p;    int temp;    for(int i=0;i&lt;N;++i){        //下面将每个数对应各自的“桶”，以10为划分范围        for(int j=0;j<(a[i]/10);++j){            p=p->next;        }        //在找到对应的桶后，与之前的数进行比较，保证各个“桶”内也按序排列<br>        (但这里的内部排序实现可能这里写得比较复杂，你可以用你自己觉得ok的方法)        while(p->pos.top()==NULL||p->pos.top()<=a[i])            p->pos.push(temp);        while(p->pos.top()>a[i]){            p->temp.push(p->pos.top());            p->pos.pop();        }        p->pos.push(a[i]);        while(p->temp.top()!=NULL){            p->pos.push(p->temp.top());            p->temp.pop();        }    }}int main(){...//函数调用}</pre><hr><font color=pink>next</font><hr><head><strong>哈希排序(Hash Sort)</strong></head><p>&emsp;&emsp;哈希排序我认为可以算是一种特殊的桶排序，一种划分范围是1的桶排序。</p><p>&emsp;&emsp;也正因如此，哈希排序免除了桶内排序的操作，思想上也更为直接，但同时这种方法肯定是不稳定的，而且是一种牺牲空间换时间的方法。但在某些对空间要求并不苛刻的情况下，哈希不失为一种好的排序选择。(哈希虽然可耻，但是有效)</p><pre>#include<iostrem>#define N 10using namespace std;int a[N]={};void HashSort(){    int p[100];//创建一个包含待排数列中所有数范围的数组    for(int i=0;i&lt;N;++i){//在数列中有的数对应的位置做标记        p[a[i]]++;    }}int main(){...//调用函数}</pre><hr><font color=pink>next</font><hr><head><strong>直接插入排序(Insertion Sort)</strong></head><p>&emsp;&emsp;插入排序就是在乱序数列中(最左)先取一个初始数，因为只有一个数，所以认为已经排好序(此处以自小至大为例)，而从剩下的依旧乱序的数列依次取出一个在已经排好序的做数列中找到相应的位置，再插入。(就是一般被大家比作理扑克那个)</p><pre>#include<iostream>#define N ...using namespace std;int a[N]={...};void InsertionSort(){    int i,j;    int temp;    for(i=1;i&lt;N;++i){        if(a[i]&lt;a[i-1]){        //若右边的数已经大于左边最后一个数则无需插入            temp=a[i];            for(j=i-1;j&gt;=0&&a[j]&gt;temp;j--){                    a[j+1]=a[j];            }            a[j+1]=temp;        }    }}int main(){...//调用函数}</pre><head><strong>分组插入排序(Grouping Insertion Sort)</strong></head><p>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithem" scheme="http://yoursite.com/categories/Algorithem/"/>
    
    
      <category term="Sorting" scheme="http://yoursite.com/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/28/hello-world/"/>
    <id>http://yoursite.com/2019/11/28/hello-world/</id>
    <published>2019-11-27T23:38:36.059Z</published>
    <updated>2019-11-27T23:38:36.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Arrival of the General</title>
    <link href="http://yoursite.com/2019/11/28/Arrival-of-the-General/"/>
    <id>http://yoursite.com/2019/11/28/Arrival-of-the-General/</id>
    <published>2019-11-27T16:00:00.000Z</published>
    <updated>2019-11-28T17:05:58.400Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-pLlijdoi" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1371262339" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"    ></div><h1 id="CodeForces-144A"><a href="#CodeForces-144A" class="headerlink" title="CodeForces 144A"></a><strong>CodeForces 144A</strong></h1><h2 id="Arrival-of-the-General"><a href="#Arrival-of-the-General" class="headerlink" title="Arrival of the General"></a>Arrival of the General</h2><p><p1>&emsp;A Ministry for Defense sent a general to inspect the Super Secret Military Squad under the command of the Colonel SuperDuper. Having learned the news, the colonel ordered to all n squad soldiers to line up on the parade ground.</p1><br></p><p><p2>&emsp;By the military charter the soldiers should stand in the order of non-increasing of their height. But as there’s virtually no time to do that, the soldiers lined up in the arbitrary order. However, the general is rather short-sighted and he thinks that the soldiers lined up correctly if the first soldier in the line has the maximum height and the last soldier has the minimum height. Please note that the way other solders are positioned does not matter, including the case when there are several soldiers whose height is maximum or minimum. Only the heights of the first and the last soldier are important.</p2><br></p><p><p3>&emsp;For example, the general considers the sequence of heights (4, 3, 4, 2, 1, 1) correct and the sequence (4, 3, 1, 2, 2) wrong.</p3><br></p><p4>&emsp;Within one second the colonel can swap any two neighboring soldiers. Help him count the minimum time needed to form a line-up which the general will consider correct.</p4><p><strong>Input</strong></p><p>&emsp;The first input line contains the only integer n (2 ≤ n ≤ 100) which represents the number of soldiers in the line. The second line contains integers a1, a2, …, an (1 ≤ ai ≤ 100) the values of the soldiers’ heights in the order of soldiers’ heights’ increasing in the order from the beginning of the line to its end. The numbers are space-separated. Numbers a1, a2, …, an are not necessarily different.</p><p><strong>Output</strong></p><p><p>&emsp;Print the only integer — the minimum number of seconds the colonel will need to form a line-up the general will like.</p></p><hr><p><strong>Example</strong><br><br><br>input<br></p><p><pre>433 44 11 22</pre><br><br>output<br></p><p><pre>2</pre><br><br>input<br></p><p><pre>710 10 58 31 63 40 76</pre><br><br>output<br></p><p><pre>10</pre></p><hr><p><strong>代码如下（AC）：</strong><br></p><p><pre></p><h1 id="include”pch-h”"><a href="#include”pch-h”" class="headerlink" title="include”pch.h”"></a>include”pch.h”</h1><h1 id="include"><a href="#include" class="headerlink" title="include"></a>include<iostream></h1><pre><code>gen</code></pre><p>using namespace std;</p><p>int main() {<br>    int n;<br>    int s[101];<br>    int p1=0, p2=0;<br>    int max, min;<br>    cin &gt;&gt; n;<br>    cin &gt;&gt; s[0];<br>    max = s[0];<br>    min = s[0];<br>    for (int i = 1; i&lt; n; i++) {<br>        cin &gt;&gt; s[i];<br>        if (max &lt; s[i]) {<br>            max = s[i];<br>            p1 = i;<br>        }<br>        if (min &gt;= s[i]) {<br>            min = s[i];<br>            p2 = i;<br>        }<br>    }<br>    if (p1 &lt; p2)<br>        cout &lt;&lt; p1 + n - 1 - p2 &lt;&lt; endl;<br>    else<br>        cout &lt;&lt; p1 + n - 2 - p2 &lt;&lt; endl;<br>    return 0;<br>}<br>&lt;/pre&gt;</p><hr><p><strong>解题思路：</strong><br></p><p><p1>&emsp;&emsp;首先，题面确定了最左边的最高的，最右边的是最低的，而在队列中间的顺序不予考虑。那么，先对情境做一个转换，即在一组乱序数列中，寻找一个最大值移至首位，一个最小值移至末尾，并得到最小移动步数。</p1><br></p><p><p2>&emsp;&emsp;数字在数组中的移动可以通过迭代实现，但如何得到最小步数呢？这时就需要考虑到最小值或最大值出现多次的情况，这可能影响你选择作为移动的那个数。但我们已经事先知道最大值要去最左边，最小值要去最右边，那么需要被移动的最大值对应的下标应该尽量小（因为使用数组时，用下标大小模拟左右），相反的最小值的下标应该尽量大。</p2><br></p><p><p3>&emsp;&emsp;再来看看如何取得所需的下标。最大值和最小值的初始值均取<code>s[0]</code>，即位于最左端，那么对于变量max来说，如果之后遇到相等的值，将保留现有下标；对于变量min来说，遇到相等的值应该获取更大的下标。</p3><br></p><p><p4>&emsp;&emsp;取得各自的下标后，若最大值下标在左，则只需将移动步数相加即可；若最大值下标在右，则需考虑两值交换只算一步，总数需减一。</p4></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Exercises" scheme="http://yoursite.com/categories/Exercises/"/>
    
    
      <category term="Threshold" scheme="http://yoursite.com/tags/Threshold/"/>
    
  </entry>
  
  <entry>
    <title>Simple Mathematical Optimization</title>
    <link href="http://yoursite.com/2019/11/28/Simple-Mathematical-Optimization/"/>
    <id>http://yoursite.com/2019/11/28/Simple-Mathematical-Optimization/</id>
    <published>2019-11-27T16:00:00.000Z</published>
    <updated>2019-11-28T17:16:06.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-sfIbXelK" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1371262339" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"    ></div><h1 id="Simple-Mathematical-Optimization"><a href="#Simple-Mathematical-Optimization" class="headerlink" title="Simple Mathematical Optimization"></a><strong>Simple Mathematical Optimization</strong></h1><p><hr></p><head><strong>CodeForces 451A</strong><meta name="generator" content="Hexo 4.0.0"><link rel="alternate" href="/atom.xml" title="Niemand" type="application/atom+xml"></head><p><p1>&emsp;After winning gold and silver in IOI 2014, Akshat and Malvika want to have some fun. Now they are playing a game on a grid made of n horizontal and m vertical sticks.&lt;/p2&gt;<br></p><p><p2>&emsp;An intersection point is any point on the grid which is formed by the intersection of one horizontal stick and one vertical stick.</p2><br></p><p><p3>&amp;emspIn the grid shown below, n = 3 and m = 3. There are n + m = 6 sticks in total (horizontal sticks are shown in red and vertical sticks are shown in green). There are n·m = 9 intersection points, numbered from 1 to 9.</p3><br></p><p><p4>&emsp;The rules of the game are very simple. The players move in turns. Akshat won gold, so he makes the first move. During his/her move, a player must choose any remaining intersection point and remove from the grid all sticks which pass through this point. A player will lose the game if he/she cannot make a move (i.e. there are no intersection points remaining on the grid at his/her move).</p4><br></p><p><p5>&emsp;Assume that both players play optimally. Who will win the game?</p5><br></p><hr><p><strong>Input</strong></p><p><p>&emsp;The first line of input contains two space-separated integers, n and m (1 ≤ n, m ≤ 100).</p><br><strong>Output</strong></p><p><p>&emsp;Print a single line containing “Akshat” or “Malvika” (without the quotes), depending on the winner of the game.</p></p><hr><p><strong>Examples</strong><br><br><br>Input</p><pre>2 2</pre>Output<pre>Malvika</pre>Input<pre>2 3</pre>Output<pre>Malvika</pre>Input<pre>3 3</pre>Output<pre>Akshat</pre><strong>Note</strong><br>Explanation of the first sample:<br><p1>&emsp;The grid has four intersection points, numbered from 1 to 4.</p1><br><p2>&emsp;If Akshat chooses intersection point 1, then he will remove two sticks (1 - 2 and 1 - 3). The resulting grid will look like this.</p2><br><p3>&emsp;Now there is only one remaining intersection point (i.e. 4). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.</p3><br><p4>&emsp;In the empty grid, Akshat cannot make any move, hence he will lose.</p4><br><p5>&emsp;Since all 4 intersection points of the grid are equivalent, Akshat will lose no matter which one he picks.</p5><hr><strong>代码如下（AC）：</strong><pre>#include<iostream>using namespace std;int main(){    int x,y,t;    cin>>x>>y;    t=x<y?x:y;    if(t%2==0)        cout<<"Malvika";    else        cout<<"Akshat";    return 0;}</pre><hr><strong>解题思路：</strong><br><p1>&emsp;&emsp;题目的意思是两个人，一次选择一个点，拿走构成该点的两根棒，拿走最后两根的人获胜。</p1><br><p2>&emsp;&emsp;如果考虑模拟的做法，那么可能需要一个二维数组进行循环操作。但是这里需要优先在程序外考虑。假设这个矩阵有x条纵轴，y条横轴。首先由Akshat拿走一根纵轴和一根横轴，那么到了Malvika则剩余(x-1)条纵轴和(y-1)条横轴，重复前者的操作。当没有能选择的点则游戏结束，即横轴或纵轴有一边或两边为0。也就是说当横轴和纵轴里较少的一个被拿完则下一个轮到的为输家。</p2><br><p3>&emsp;&emsp;就结论来看，谁是赢家取决于x和y中那个较小的数是奇是偶。</p3><br><br><hr><head><strong>CodeForces 460A</strong></head><p1>&emsp;Vasya has n pairs of socks. In the morning of each day Vasya has to put on a pair of socks before he goes to school. When he comes home in the evening, Vasya takes off the used socks and throws them away. Every m-th day (at days with numbers m, 2m, 3m, …) mom buys a pair of socks to Vasya.</p1><br> <p2>&emsp;She does it late in the evening, so that Vasya cannot put on a new pair of socks before the next day. How many consecutive days pass until Vasya runs out of socks?</p2><br><hr><strong>Input</strong><br><p>&emsp;The single line contains two integers n and m (1 ≤ n ≤ 100; 2 ≤ m ≤ 100), separated by a space.</p><br><strong>Output</strong><br><p>Print a single integer — the answer to the problem.</p><br><hr><strong>Examples</strong><br><br>Input<pre>2 2</pre>Output<pre>3</pre>Input<pre>9 3</pre>Output<pre>13</pre><p><strong>Note</strong><br></p><p><p1>&emsp;In the first sample Vasya spends the first two days wearing the socks that he had initially. Then on day three he puts on the socks that were bought on day two.</p1><br></p><p><p2>&emsp;In the second sample Vasya spends the first nine days wearing the socks that he had initially. Then he spends three days wearing the socks that were bought on the third, sixth and ninth days. Than he spends another day wearing the socks that were bought on the twelfth day.</p2></p><p><hr><br><strong>代码如下(AC)：</strong></p><p><pre>#include<iostream></p><p>using namespace std;</p><p>int main() {<br>    int n, m;<br>    int d;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    d = n * m / (m - 1);<br>    if (d%m == 0)<br>        d—;<br>    cout &lt;&lt; d &lt;&lt; endl;<br>    return 0;<br>}&lt;/pre&gt;</p><p><hr><br><strong>解题思路：</strong><br></p><p><p1>&emsp;&emsp;首先这题一般采取的是进行循环，至n≤m时停止循环，因为此时在袜子穿完前不会再只能加了。</p1><br></p><p><p2>&emsp;&emsp;而这种操作虽然已经很简洁了，但依然O(n)的复杂度。那么，在编写程序前，先根据题面列出等式,并化简得：d=(n*m)/(m-1)。其中d至天数，而很快就会发现exanple中的第一对输入输出就不满足了，那么再脑内模拟一下就会发现在求得的d能整除m时d应该减一。因为在这种情况意味着在新袜子到的前一天刚好穿完了袜子，而新的袜子不能在第一天被穿。</p2><br></p><p><p3>&emsp;&emsp;此时的程序要操作的主要步骤只有一条计算式和一个条件判断，复杂度为O(1)级。(虽然这优化可能没什么用，但这种思想可以应用到别的更复杂的题目中（如：约瑟夫环）。)</p3></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Exercises" scheme="http://yoursite.com/categories/Exercises/"/>
    
    
      <category term="Threshold" scheme="http://yoursite.com/tags/Threshold/"/>
    
  </entry>
  
</feed>
